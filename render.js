const encodedHTML = `<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Educational Chat with Multiple Assistants</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">


    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            display: flex;
            height: 100vh;
            background: #e5ddd5;
            overflow:hidden;
        }
        
        /* Sidebar */
        .sidebar {
            width: 30%;
            background: #fff;
            border-right: 1px solid #e1e1e1;
            display: flex;
            flex-direction: column;
            overflow:hidden;
        }
        
        .user-profile {
            padding: 4px;
            background: #008069;
            display: flex;
            align-items: center;
            color: white;
        }
        
        .user-profile img {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            margin-right: 15px;
            border: 2px solid white;
        }
        
        .user-info {
            flex: 1;
        }
        
        .user-info h3 {
            margin-bottom: 5px;
            font-weight: 500;
        }
        
        .phone-number {
            display: flex;
            align-items: center;
            font-size: 14px;
        }
        
        .phone-icon {
            margin-right: 8px;
            font-size: 16px;
        }
        
        .verified-badge {
            margin-left: 5px;
            color: #00af9c;
            font-size: 16px;
        }
        
        .search {
            padding: 10px;
            background: #f0f2f5;
        }
        
        .search input {
            width: 100%;
            padding: 10px 15px;
            border-radius: 20px;
            border: none;
            background: white;
            font-size: 14px;
        }
        
        .chat-list {
            flex: 1;
            overflow-y: auto;
        }
        
        .chat-item {
            display: flex;
            padding: 12px;
            border-bottom: 1px solid #f0f2f5;
            cursor: pointer;
            position: relative;
        }
        
        .chat-item:hover {
            background: #f5f5f5;
        }
        
        .chat-item.active {
            background: #f0f2f5;
        }
        
        .chat-item img {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            margin-right: 12px;
        }
        
        .chat-info {
            flex: 1;
        }
        
        .chat-info h3 {
            font-size: 16px;
            margin-bottom: 4px;
        }
        
        .chat-info p {
            font-size: 14px;
            color: #667781;
        }
        
        .chat-phone {
            font-size: 12px;
            color: #667781;
            margin-top: 2px;
        }
        
        .call-icon {
            position: absolute;
            right: 15px;
            top: 50%;
            transform: translateY(-50%);
            color: #008069;
            font-size: 20px;
            cursor: pointer;
        }
        
        /* Main Chat Area */
        .chat-area {
            flex: 1;
            display: flex;
            flex-direction: column;
            background: #e5ddd5;
            background-image: url('https://web.whatsapp.com/img/bg-chat-tile-light_a4be512e7195b6b733d9110b408f075d.png');
        }
        
        .chat-header {
            padding: 15px;
            background: #f0f2f5;
            display: flex;
            align-items: center;
            border-bottom: 1px solid #e1e1e1;
            justify-content: space-between;
        }
        
        .chat-header-left {
            display: flex;
            align-items: center;
        }
        
        .chat-header img {
            width: 45px;
            height: 45px;
            border-radius: 50%;
            margin-right: 15px;
        }
        
        .chat-header-actions {
            display: flex;
            gap: 20px;
        }
        
        .chat-header-actions span {
            font-size: 20px;
            color: #54656f;
            cursor: pointer;
        }
        
        .chat-messages {
            flex: 1;
            padding: 20px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
        }
        
        .message {
            max-width: 65%;
            padding: 10px 15px;
            margin-bottom: 15px;
            border-radius: 8px;
            position: relative;
            box-shadow: 0 1px 1px rgba(0,0,0,0.1);
        }
        
        .received {
            background: white;
            align-self: flex-start;
            border-top-left-radius: 0;
        }
        
        .sent {
            background: #d9fdd3;
            align-self: flex-end;
            border-top-right-radius: 0;
        }
        
        .message-sender {
            font-size: 13px;
            font-weight: bold;
            margin-bottom: 5px;
            color: #1a472a;
        }
        
        .message-time {
            font-size: 11px;
            color: #667781;
            text-align: right;
            margin-top: 5px;
        }
        
        .chat-input {
            padding: 15px;
            background: #f0f2f5;
            display: flex;
            align-items: center;
        }
        
        .chat-input input {
            flex: 1;
            padding: 12px 18px;
            border-radius: 25px;
            border: none;
            margin: 0 10px;
            font-size: 15px;
        }
        
        .chat-input button {
            background: none;
            border: none;
            font-size: 24px;
            color: #54656f;
            cursor: pointer;
        }
        
        /* Call modal */
        .call-modal {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.8);
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            color: white;
            z-index: 1000;
            display: none;
        }
        
        .call-modal img {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            margin-bottom: 20px;
            border: 3px solid white;
        }
        
        .call-modal h2 {
            font-size: 24px;
            margin-bottom: 5px;
        }
        
        .call-modal p {
            font-size: 18px;
            margin-bottom: 30px;
            color: #ccc;
        }
        
        .call-actions {
            display: flex;
            gap: 30px;
        }
        
        .call-action {
            background: #333;
            width: 60px;
            height: 60px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 24px;
            cursor: pointer;
        }
        
        .call-action.end-call {
            background: #f44336;
        }

        /* Speech status */
        .speech-status {
            padding: 10px;
            background: #f0f2f5;
            text-align: center;
            font-size: 14px;
            color: #54656f;
            display: none;
        }
        
        .listening {
            animation: pulse 1.5s infinite;
        }
        
        @keyframes pulse {
            0% { color: #54656f; }
            50% { color: #008069; }
            100% { color: #54656f; }
        }

        /* Teacher header */
        .teacher-header {
            padding: 15px;
            background: #f5f5f5;
            border-bottom: 1px solid #e1e1e1;
        }
        
        .teacher-header h3 {
            color: #008069;
            font-size: 16px;
        }
        
        .teacher-list {
            padding: 10px;
            background: white;
            border-bottom: 1px solid #e1e1e1;
        }
        
        .teacher-btn {
            display: flex;
            align-items: center;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
            margin-bottom: 5px;
        }
        
        .teacher-btn:hover {
            background: #f0f2f5;
        }
        
        .teacher-btn img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
        }
        
        .teacher-btn span {
            font-weight: 500;
            flex: 1;
        }
        
        .teacher-btn small {
            color: #667781;
            font-size: 12px;
        }

  #assistants {
    display: flex;
    flex-direction: column;
    gap: 12px;
    mouse:pointer;
   overflow-y:auto;
background: #e0f7fa;
  }

  .assistant {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 8px;
    padding: 10px;
    width: 400px;
   background: #e0f7fa;
    cursor: pointer;
  }

  .assistant img {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    object-fit: cover;
    margin-right: 15px;
  }

  .assistant .info h4 {
    margin: 0 0 4px 0;
    font-size: 16px;
  }

  .assistant .info p {
    margin: 0;
    font-size: 14px;
    color: #555;
  }



    h1 {
      text-align: center;
      color: #333;
    }
#top-buttons {
    padding: 5px;
    background: #008069;
    display: flex;
    align-items: center; /* Vertically center items */
    justify-content: center; /* Optional: horizontally center items */
    color: white;
    
}

    .top-btn {
      padding: 10px 10px;
      background: #3949ab;
      color: white;
      border: none;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
    }
.top-btn:hover {
  background: red; /* Slightly darker blue */
  transform: scale(1.09); /* Slight zoom */
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Subtle shadow */
  transition: all 0.2s ease-in-out;
}
    #word-list {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(150px, 0fr));
      gap: 5px;
     width: 94%;
      margin: auto;
      padding: 5px;
      background: #e0f7fa;
      border-radius: 30px;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
      height:420px;
      overflow-y:auto;
     scrollbar-width: none; 
     margin-top:15px;
     justify-content: center;    /* center horizontally */
  align-items: center;        /* center vertically */
  height: 83vh;              /* full viewport height */
     


    }
    .word {
      background: #e0f7fa;
      color: blue;
      padding: 10px 15px;
      border-radius: 8px;
      text-align: center;
font-family: 'Dancing Script', cursive;
      font-size: 1.1em;
      font-weight: bold;
      cursor: pointer;
      transition: transform 0.2s, background 0.2s;
box-shadow:  20px 20px 100px #b3c6c8,
             -20px -20px 100px #ffffff;
    }
    .word:hover {
      background: #b2ebf2;
      transform: scale(1.05);
    }
@keyframes flipIn {
  0% {
    transform: translate(-50%, -50%) rotateY(0deg);
    opacity: 0;
  }
  100% {
    transform: translate(-50%, -50%) rotateY(360deg);
    opacity: 1;
  }
}

#modalflip {
  display: none;
  position: fixed;
  z-index: 10;
  left: 65%;
  top: 50%;
  transform: translate(-50%, -50%);
  width: 40%;
  height: 30%;
  background: red;
  justify-content: center;
  align-items: center;
}

/* When modal is shown AND has .flip class */
#modalflip.flip {
 display: none;
  
  animation: flipIn 2s ease-out;
}


    #practice-modal {
      display: none;
      position: fixed;
      z-index: 10;
      left: 0; top: 0;
      width: 100%; height: 92%;
     background: #fff;
      justify-content: center;
      align-items: center;
           
          }
    #modal-content, #practice-content {
     background: #e0f7fa;
      padding: 5px;
      border-radius: 12px;
      width: 1000px;
      text-align: center;
      box-shadow: 0 6px 20px rgba(0,0,0,0.3);
      height:550px;
      margin-top:0%;
      

    }
    .close-btn, .speak-btn, .action-btn {
      margin-top: 15px;
      background: #ff5252;
      border: none;
      color: white;
      padding: 10px 20px;
      border-radius: 8px;
      cursor: pointer;
    }
    .speak-btn {
      background: #00796b;
    }
    .action-btn {
      background: #3949ab;
      margin: 5px;
    }
    .speak-btn:hover {
      background: #004d40;
    }
    .highlight {
      background-color: yellow;
      font-weight: bold;
    }
 .results-container {
      display: flex;
      gap: 20px;
      margin-top: 20px;



    }
 .results-containerp {
      display: flex;
      gap: 20px;
      margin-top: 20px;



    }
    .progress-list {
      flex: 1;
      background: #f8f9fa;
      padding: 15px;
      border-radius: 10px;
      min-height: 200px;
    }
    .progress-list h3 {
      margin: 0 0 15px 0;
      color: #333;
      text-align: center;
    }
    .correct-list {
  border: 0px solid #4CAF50;
  height: 300px;
  overflow-y: auto;
  background-image: repeating-linear-gradient(
    to bottom,
    transparent 0px,
    transparent 26px,
    lightblue 26px,
    lightblue 27px
  );
  padding: 4px 8px;
  border-radius:30px;
  border:1px dashed blue;
}

    .incorrect-list {
  border: 0px solid #f44336;
  height: 300px;
  overflow-y:auto;
  background-image: repeating-linear-gradient(
    to bottom,
    transparent 0px,
    transparent 26px,
    lightcoral 26px,
    lightcoral 27px
  );
  padding: 4px 8px;
  border-radius:30px;
  border:1px dashed #f44336;
}

    .word-item {
      background: transparent;
      padding: 10px;
      margin: 5px 0;
      border-radius: 5px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-family: 'Dancing Script', cursive;font-weight:bold;
     
    }
    .correct-item { border-left: 0px solid #4CAF50;}
    .incorrect-item { border-left: 0px solid #f44336; }
    .speak-word-btn {
      background: red;
      border: none;
      color: red;
      padding: 5px 10px;
      border-radius: 4px;
      cursor: pointer;
    }
    .speak-word-btn:hover { background: #1976D2; } 
#pronounce-lists {
  display: flex;
  gap: 20px;
  margin-top: 20px;
}

.pronounce-list {
  flex: 1;
  background: #f8f9fa;
  padding: 15px;
  border-radius: 10px;
  min-height: 200px;
}
#spellbeemodal1.modal {
  display: none;
  position: fixed;
  z-index: 999;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  overflow-y: auto;
  background-color: rgba(0,0,0,0.7);
  padding-top: 40px;
}

#spellbeemodal1 .modal-content {
  background-color: #fefefe;
  margin: auto;
  padding: 30px;
  border-radius: 10px;
  width: 100%;
  
  box-shadow: 0 5px 20px rgba(0,0,0,0.3);
  animation: fadeIn 0.3s ease-in-out;
}

#spelling-area p {
  font-size: 18px;
  margin-bottom: 2px;
}

.spell-row {
  display: flex;
  align-items: center;
  gap: 10px;
  flex-wrap: wrap; /* Allow wrapping on small screens */
}

#spell-input {
  flex: 1;
  min-width: 150px;
  padding: 10px;
  font-size: 16px;
  border: 1px solid #bbb;
  border-radius: 6px;
}

.action-btn {
  padding: 10px 20px;
  background-color: #007bff;
  color: white;
  font-size: 16px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.action-btn:hover {
  background-color: #0056b3;
}

.hint {
  font-style: italic;
  color: #666;
  white-space: nowrap;
}

#spell-result {
  margin-top: 15px;
  font-size: 16px;
  font-weight: bold;
  color: #333;
}
@media (max-width: 768px) {
    body {
        flex-direction: column;
        height: auto;
        min-height: 100vh;
    }

    .sidebar {
        width: 100%;
        height: 60vh;
        border-right: none;
        border-bottom: 1px solid #e1e1e1;
    }

    .chat-area {
        height: 40vh;
    }

    #assistants {
        gap: 8px;
    }

    .assistant {
        width: 95%;
        max-width: 100%;
    }

    #word-list {
        grid-template-columns: 1fr;
        width: 100%;
        height: 50vh;
    }

    #spellbeemodal1 {
        width: 100%;
        left: 0;
    }

    .modal-content {
        width: 95%;
        height: 80%;
    }
}
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
       <div class="user-profile">
  <i class="fa fa-user-shield" style="font-size: 40px; color: orange;"></i>


            <div class="user-info">
                <h3>Nayef Firdous</h3>
                <div class="phone-number">
                    <span class="phone-icon">📱</span>
                    <span id="my-phone-number">Admin</span>
                    <span class="verified-badge">✓</span>
                </div>
            </div>
        </div>
        
        <div class="search">
            <input type="text" placeholder="Search or start new chat">
        </div>

        <div class="teacher-header">
            <h3>Educational Assistants</h3>
        </div>
        <!-- Specialized Assistants as HTML -->
<div id="assistants">
  <div class="assistant"id="open-spellbee-btn">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Spelling Assistant">
    <div class="info"style="color:red;">
      <h4>Spelling Assistant (General Assistant)</h4>
      <p>Phone: +11111</p>
    </div>
  </div>

  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Dr. Newton (Physics)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>
  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Dr. Curie (Chemistry)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>
  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Dr. Darwin (Biology)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>
  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Prof. Pythagoras (Maths)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>
  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Dr. Galileo (Astronomy)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>
  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Prof. Shakespeare (English)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>

  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Prof. Khalil (Arabic)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>

  <div class="assistant">
    <img src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSGcrZqLbIyWyG2ErTvRLGjuHgk4VzFrOfnwI6ZAZ6yEwPs-reX82zTyMt50rgmlU-ke28&usqp=CAU" alt="Dr. Newton">
    <div class="info">
      <h4>Dr. Herodotus (History)</h4>
      <p>Phone: +1 (555) 000-0002</p>
    </div>
  </div>

  
</div>

        
        <div class="chat-list" id="chat-list"></div>
    </div>
    
    <!-- Main Chat Area -->
    <div class="chat-area">
        <div class="chat-header">
            <div class="chat-header-left">
                <img id="current-chat-img" src="" alt="">
                <div class="chat-info">
                    <h3 id="current-chat-name"></h3>
                    <p id="current-chat-status"></p>
                </div>
            </div>
            <div class="chat-header-actions">
                <span class="call-button">📞</span>


                <span>⋮</span>
            </div>
        </div>
        
        <div class="chat-messages" id="chat-messages">




</div>
        
        <div class="speech-status" id="speech-status"></div>
        
        <div class="chat-input">
            <button>😊</button>
            <input type="text" id="message-input" placeholder="Type a message">
            <button onclick="sendMessage()">➤</button>
        </div>
    </div>
    
    <!-- Call Modal -->
    <div class="call-modal" id="call-modal">
        <img id="caller-img" src="" alt="">
        <h2 id="caller-name">Calling...</h2>
        <p id="caller-phone"></p>
        <div class="call-actions">
            <div class="call-action end-call" onclick="endCall()">
                <i class="fas fa-phone-slash"></i>
            </div>
        </div>
    </div>
<!-- SpellBee Modal -->
<div id="spellbeemodal1" style="display:none;position:fixed; z-index:100; left:30%; top:0; width:70%; height:100%; background:#222; justify-content:center; align-items:center;">

  
    
    <div id="top-buttons"style=" background: #008069;">

       <button class="top-btn"style="margin-top:10px;background:transparent;color:white;border-radius:30px;font-family: 'Times New Roman', Times, serif;
  font-size:15px;" onclick="openSpellingPra()">🧠 WELCOME TO SPELL-BEE PRACTICE-STAGE 1</button>
      <button class="top-btn"style="background: #008069;box-shadow:  5px 5px 10px #006553,
             -5px -5px 10px #009b7f;color:white;margin-top:10px;border-radius:30px;" onclick="openSpellingPractice()">🧠 PRACTICE SPELLING</button>

      <button class="top-btn"style="background: #008069;box-shadow:  5px 5px 10px #006553,
             -5px -5px 10px #009b7f;white;margin-top:10px;border-radius:30px;" onclick="openPronunciationPractice()">🗣️ PRACTICE PRONUNCIATION</button>
      <button class="close-btn" style="margin-top:10px;border-radius:30px;box-shadow:  5px 5px 10px #006553,
             -5px -5px 10px #009b7f;" onclick="document.getElementById('spellbeemodal1').style.display='none'">Close</button>
    </div>
    <div id="word-list">Loading...</div>
<div style="position: absolute; bottom: 0; width: 100%; background:transparent; color: white; text-align: center; padding: 3px;font-family: Merriweather, serif;font-size:13px;">
    Design&Development:Lone Firdous | App Testing: Lone Nayef
  </div>

    <!-- Definition Modal -->
    <div id="modalflip"class="flip">
      <div id="modal-content"style="height:300px;">
        <h2 id="modal-word" style="
  font-family: 'Times New Roman', Times, serif;
  font-size:30px;
  border-bottom: 2px solid red;
  padding-bottom: 4px;
  margin-bottom: 8px;
">Word</h2>

        <p id="modal-definition" style="
  height: 130px;
  line-height: 24px;
font-family: 'Dancing Script', cursive;
  background-image: repeating-linear-gradient(
    to bottom,
    transparent 0px,
    transparent 26px,
    lightblue 26px,
    lightblue 27px
  );
  padding: 4px 8px;
  margin-bottom:0px;
  font-size: 18px;
  overflow-y: auto;
">Definition</p>

        <div style="display: flex; gap: 50px;justify-content: center;margin-top:0px;">
  <button class="speak-btn" onclick="speakWordAndDefinition()">🔊 Speak</button>
  <button class="close-btn" onclick="closeModal()">Close</button>
</div>

      </div>
    </div>

    <!-- Practice Modal -->
    <div id="practice-modal"style="width:70%;background:#222;left: 32%;top:60px;">
      <div id="practice-content"style="width:65%;height:80%;">
        <h2 id="practice-title">Practice</h2>
        <div id="practice-body"style="background:#ccc;"></div>
        <div class="results-container">
          <div class="progress-list correct-list">
            <h3>✅ CORRECT SPELLED WORDS (<span id="correct-count">0</span>)</h3>
            <div id="correct-words"></div>
          </div>
          <div class="progress-list incorrect-list">
            <h3>❌ INCORRECT SPELLED WORDS (<span id="incorrect-count">0</span>)</h3>
            <div id="incorrect-words"></div>
          </div>
        </div>
        <button class="close-btn" onclick="closePractice()">Close</button>
      </div>
    </div>

    <!-- Modal Close Button -->
    
  </div>
</div>
<script>
document.getElementById("open-spellbee-btn").onclick = function () {
  document.getElementById("spellbeemodal1").style.display = "block";
};

window.onclick = function (event) {
  const modal = document.getElementById("spellbeemodal1");
  if (event.target === modal) {
    modal.style.display = "none";
  }
};
</script>

<script src="app1.js"></script>   
</body>
</html>`;

document.write(atob(encodedHTML));